{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my developer knowledge base Hi! This is my personal database where I'm going to store and structure my knowledge about everything related to programming. \ud83d\udcda","title":"Home \ud83c\udfe0"},{"location":"#welcome-to-my-developer-knowledge-base","text":"Hi! This is my personal database where I'm going to store and structure my knowledge about everything related to programming. \ud83d\udcda","title":"Welcome to my developer knowledge base"},{"location":"solid/","text":"SOLID SOLID is an acronym meaning OOP principles for building software applications that ease your experience with growing app codebase. It's not a set of rules. You shouldn't treat them as a set strict rules, but as principles. Goals Those principles allow us to build flexible and maintainable software. They can reduce complexity of your growing applications. Meaning The acronym stands for 5 principles: S ingle Responsibility; O pen/Closed; L iskov Substitution; I nterface Segregation; D ependency Inversion. Single Responsibility A class or module should have one, and only one, reason to be changed. How helps reduces amount of objects inside each context; less objects is easier to remember and operate; less objects is easier to test; less objects is easier to change, means less connections between other parts of the code; Separating user and db related code helps to reduce complexity of the program.","title":"SOLID Principles \ud83e\udea8"},{"location":"solid/#solid","text":"SOLID is an acronym meaning OOP principles for building software applications that ease your experience with growing app codebase. It's not a set of rules. You shouldn't treat them as a set strict rules, but as principles.","title":"SOLID"},{"location":"solid/#goals","text":"Those principles allow us to build flexible and maintainable software. They can reduce complexity of your growing applications.","title":"Goals"},{"location":"solid/#meaning","text":"The acronym stands for 5 principles: S ingle Responsibility; O pen/Closed; L iskov Substitution; I nterface Segregation; D ependency Inversion.","title":"Meaning"},{"location":"solid/#single-responsibility","text":"A class or module should have one, and only one, reason to be changed.","title":"Single Responsibility"},{"location":"solid/#how-helps","text":"reduces amount of objects inside each context; less objects is easier to remember and operate; less objects is easier to test; less objects is easier to change, means less connections between other parts of the code; Separating user and db related code helps to reduce complexity of the program.","title":"How helps"}]}